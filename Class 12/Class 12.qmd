---
title: "Class 12: Transcriptomics and the Analysis of RNA-Seq Data"
author: "Dahlia Loomis"
date: 05/12/23
format: pdf
---

First, we installed the DESeq package before moving on to the second portion of the lab.

# 2. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Now, we will have a brief look at the data

```{r}
head(counts)
head (metadata)
```

**Q1. How many genes are in this dataset?**

```{r}
nrow(counts)
```

There are `r nrow(counts)` genes in the dataset

**Q2. How many 'control' cell lines do we have?**

```{r, include = FALSE}
control.cell.lines <- table(metadata$dex)['control']
```

There are `r control.cell.lines` control cell lines.

# 3. Toy Differential Gene Expression

First, we will get a better understanding of differential gene expression analysis.

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

We will separate this code out to understand it better:

```{r}
metadata[,"dex"] == "control"
```

This table shows just the control samples

```{r}
control <- metadata[metadata[,"dex"] == "control", ]

control
```

Now, we can separate out the id's

```{r}
control$id
```

Now, we can use this as a subset in the counts data set and summarize the rows using the mean of the rows.

```{r}
control.counts <- counts[,control$id]
control.means <- rowMeans(control.counts)

```

**Q3. How would you make the above code in either approach more robust?**

We can use the rowMeans function. This allows the function to be applied to other datasets without having to alter the value that you are dividing by. In this particular data set, we divide by 4 since there are 4 genes, but this is not the case for all datasets. The number of values in each row is going to be different.

**Q4. Follow the same procedure for the `treated` samples (i.e. calculate the mean per gene across drug samples and assign to a labeled vector called `treated.mean`)**

```{r}
treated <- metadata[metadata[,"dex"] == "treated",]
treated$id
treated.counts <- counts[,treated$id]
treated.means <- rowMeans(treated.counts)

#View(as.data.frame(treated.means))
```

```{r}
meancounts <- data.frame(control.means, treated.means)
```

**Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look like the following.**

```{r}
plot(meancounts)
```

Now, we can make the plot a little fancier by using ggplot2.

**Q5(b). You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?**

You would use the geom_point function.

```{r}
library(ggplot2)
ggplot(counts, aes(control.means, treated.means)) + geom_point(alpha = 0.5)
```

**Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?**

The argument we can use is `log()`

###### Note: this emits the 0s 

```{r}
plot(log(meancounts))
```

To calculate the log2 of the fold change between treated and control...

We need to add a log2 column to the data frame

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.means"]/meancounts[,"control.means"])
head(meancounts)
```

To remove zero values...

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
```

This gives us the row and the column where we have a 0.

```{r}
#which(meancounts[,1:2] == 0, arr.ind = TRUE)
```

**Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call unique() function?**

The arr.ind argument will tell us the row and column numbers for where we have 0s in the data frame instead of just gettting a matrix of TRUE and FALSE. We then need to use the unique() function to avoid repetitions.

### Overexpressed and underexpressed genes

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
table(up.ind)
table(down.ind)
```

**Q8. Using the up.ind vector above, can you determine how many up regulated genes we have at the greater than 2 fc level?**

We have 250 genes.

**Q9. Using the down.ind vector above, can you determine how many down regulated genes we have at the greater than 2fc level?**

We have 367 genes.

**Q10. Do you trust these results? Why or why not?**

No. We would need to see the p-values first since we need some quantitative analysis to see if our results are significant. When we actually run the DESeq analysis, we find that the boundaries for the fold-change are much smaller.

# 4. DESeq2 Analysis

First, we need to load in the package

```{r}
library(DESeq2)
citation("DESeq2")
```

Let's generate the specific object DESeq2 needs:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~dex)
dds
```

## DESeq analysis

```{r}
dds <- DESeq(dds)
```

```{r}
results(dds)
#always use the padj column for analysis
```

With the summary command, we can have a quick overview of the results

```{r}
res <- results(dds)
summary(res, alpha = 0.05)
```

# 6. Data Visualization

## Volcano Plots 

```{r}
plot(res$log2FoldChange, -log10(res$padj))
```
