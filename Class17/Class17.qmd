---
title: "Class 17: Vaccination Rate Mini Project"
author: "Dahlia Loomis"
date: 05/31/2023
format: gfm
---

# Class 17: Vaccination Rate Mini Project

First, import the data set:

```{r}
vax <- read.csv("covid19vaccinesbyzipcode_test.csv")
head(vax)
```

Q1. What column details the total number of people fully vaccinated?

persons_fully_vaccinated

Q2. What column details the Zip code tabulation area?

zip_code_tabulation_area

Q3. What is the earliest date in this dataset?

2021-01-05

```{r}

```

Q4. What is the latest date in the dataset?

2023-05-23

Now, we are going to use the skimr package to get an overview of the dataset

```{r}
skimr::skim_without_charts(vax)
```

Q5. How many numeric columns are in the dataset?

There are 14 numeric columns in the dataset

**Q6.** Note that there are "missing values" in the dataset. How many `NA` values there in the `persons_fully_vaccinated` column?

```{r}
sum(is.na(vax$persons_fully_vaccinated))
```

There are 17711

**Q7.** What percent of `persons_fully_vaccinated` values are missing (to 2 significant figures)?

```{r}
17711/nrow(vax) *100

```

8.03 percent

Q8. The data might be missing because the data might not have information from all agencies that administered the vaccines. Like it says in the mini lab, federal agencies who received the vaccine directly from the CDC are not included.

## Working with Dates

First, we need to install and load in the lubridate package

```{r}
#install.packages("lubridate")
library(lubridate)
```

Today's date

```{r}
today()
```

We can convert our data to lubridate format rather than having it as a character

```{r}
# Specify that we are using the year-month-day format
vax$as_of_date <- ymd(vax$as_of_date)

```

Now, we can do math with the dates to find how many days have passed since the first vaccination was reported in the dataset

```{r}
today() - vax$as_of_date[1]
```

Using the first and last value, we can determine how many days the dataset span.

```{r}
vax$as_of_date[nrow(vax)] - vax$as_of_date[1]
```

**Q9.** How many days have passed since the last update of the dataset?

```{r}
today() - vax$as_of_date[nrow(vax)]
```

**Q10.** How many unique dates are in the dataset (i.e.Â how many different dates are detailed)?

```{r}
length(unique(vax$as_of_date))
```

There are 125 dates detailed

## Working with ZIP Codes

```{r}
#install.packages("zipcodeR")
library(zipcodeR)
```

```{r}
geocode_zip('92037')
```

To calculate the distance between the centroids of any two ZIP codes in miles:

```{r}
zip_distance('92037','92109')
```

To pull census data about zip code areas, we can use the function `reverse_zipcode()`

```{r}
reverse_zipcode(c('92037', "92109") )
```

## Focus on the San Diego Area

First, we need to restrict ourselves to the San Diego County area with the following code:

```{r}
# Subset to San Diego county only areas

sd <- vax[vax[, "county" ] == "San Diego",]
sd
```

We can also look at this using the dplyr package:

```{r}
library(dplyr)

sd <- filter(vax, county == "San Diego")

nrow(sd)
```

**Q11.** How many distinct zip codes are listed for San Diego County?

We can use the `reverse_zipcode()` function:

```{r}
sd.zipcodes <- length(unique(sd$zip_code_tabulation_area))
                               
sd.zipcodes
```

There are 107 distinct zip codes listed for San Diego County

**Q12.** What San Diego County Zip code area has the largest population in this dataset?

```{r}
largest_zip_code = sd[sd$age5_plus_population == max(sd$age5_plus_population, na.rm = TRUE),]
unique(largest_zip_code$zip_code_tabulation_area)
```

92154

**Q13.** What is the overall average (with 2 decimal numbers) "Percent of Population Fully Vaccinated" value for all San Diego "County" as of "2023-05-23"?

```{r}
library(dplyr)
average.vaccinated <- filter(sd, as_of_date == "2023-05-23")
mean(average.vaccinated$percent_of_population_fully_vaccinated, na.rm = TRUE)
```

74.2%

**Q14.** Using either ggplot or base R graphics make a summary figure that shows the distribution of Percent of Population Fully Vaccinated values as of "2023-05-23"?

```{r}
hist(average.vaccinated$percent_of_population_fully_vaccinated, xlab = "Percentage of Population Fully Vaccinated", main = "Histogram of Vaccination Rates Across San Diego County - \nMay 23, 2023")
```

## Focus on UCSD/La Jolla

First, we need to filter the data to show only the 92307 zip code since this is where ucsd is:

```{r}
ucsd <- filter(sd, zip_code_tabulation_area=="92037")
ucsd[1,]$age5_plus_population
```

**Q15**. Using **ggplot** make a graph of the vaccination rate time course for the 92037 ZIP code area:

```{r}
library(ggplot2)
ggplot(ucsd) +
  aes(as_of_date, percent_of_population_fully_vaccinated) +
  geom_point() +
  geom_line(group=1) +
  ylim(c(0,1)) +
  labs(x ="Date", y="Percent Vaccinated", title = "Vaccination rate for La Jolla CA 92037")
```

## Comparing to Similar Sized Areas

For this portion of the lab, we will subset all CA areas with a population size as large as 92037 like we worked with in the last question.

```{r}
vax.36 <- filter(vax, age5_plus_population > 36144 &
                as_of_date == "2023-05-23")

#head(vax.36)
```

**Q16**. Calculate the mean *"Percent of Population Fully Vaccinated"* for ZIP code areas with a population as large as 92037 (La Jolla) *as_of_date* "2023-05-23". Add this as a straight horizontal line to your plot from above with the `geom_hline()` function?

```{r}
mean.vax.36 <- mean(vax.36$percent_of_population_fully_vaccinated, na.rm = T)
```

The mean is 0.723, so we can now add this to our graph.

```{r}
line.plot.ucsd <- ggplot(ucsd) +
  aes(as_of_date, percent_of_population_fully_vaccinated) +
  geom_point() +
  geom_line(group=1) + 
  geom_hline(yintercept = mean.vax.36) +
  ylim(c(0,1)) +
  labs(x ="Date", y="Percent Vaccinated", title = "Vaccination rate for La Jolla CA 92037")

line.plot.ucsd
```

**Q17.** What is the 6 number summary (Min, 1st Qu., Median, Mean, 3rd Qu., and Max) of the *"Percent of Population Fully Vaccinated"* values for ZIP code areas with a population as large as 92037 (La Jolla) *as_of_date* "2023-05-23"?

```{r}
summary(vax.36$percent_of_population_fully_vaccinated)
```

The minimum is 0.3816, the 1st quartile is 0.6469, the median is 0.7207, the mean is 0.7226, the third quartile is 0.7924, and the maximum is 1.000.

**Q18.** Using ggplot generate a histogram of this data.

```{r}
vax.36.fully <- vax.36$percent_of_population_fully_vaccinated
library(ggplot2)
histogram.la.jolla <- ggplot(vax.36, aes(x = vax.36.fully)) + geom_histogram()

histogram.la.jolla
```

**Q19**. Is the 92109 and 92040 ZIP code areas above or below the average value you calculated for all these above?

The average was 72.26% fully vaccinated. Now, we can filter for these particular zipcodes to see what the average is for 92109 and 92040

```{r}
vax.92109 <- vax %>% filter(as_of_date == "2023-05-23") %>%  
  filter(zip_code_tabulation_area=="92109") %>%
  select(percent_of_population_fully_vaccinated)

vax.92040 <- vax %>% filter(as_of_date == "2023-05-23") %>%  
  filter(zip_code_tabulation_area=="92040") %>%
  select(percent_of_population_fully_vaccinated)
```

The percent of fully vaccinated individuals is 0.552 for 92109 and 0.695 for 92040.

```{r}
line.plot.ucsd + geom_hline(yintercept = 0.695, linetype = "dashed", col = "plum3") + geom_hline(yintercept = 0.552, linetype = "dashed", col = "paleturquoise3")
```

They are below the average value.

**Q20.** Finally make a time course plot of vaccination progress for all areas in the full dataset with a `age5_plus_population > 36144`.

```{r}
vax.36.all <- filter(vax, age5_plus_population > 36144)


ggplot(vax.36.all) +
  aes(as_of_date,
      percent_of_population_fully_vaccinated, 
      group=zip_code_tabulation_area) +
  geom_line(alpha=0.2, color= "darkslategray3") +
  ylim(c(0,1)) +
  labs(x= "Date", y= "Percent Vaccinated",
       title= "Vaccination Rates Across California",
       subtitle= "Only areas with a population about 36k are shown") +
  geom_hline(yintercept = 0.72, linetype= "dashed")
```
